name: Build APK and Version Bump

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/workflows/'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.12'

      - name: Decode Keystore
        run: |
          echo "=== KEYSTORE DECODING DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Directory contents before decoding:"
          ls -la
          echo "Decoding keystore to app/ folder..."
          echo "$SIGNING_KEYSTORE" | base64 --decode > app/release-keystore.jks
          echo "Keystore decoded to: app/release-keystore.jks"
          echo "Directory contents after decoding:"
          ls -la
          echo "App folder contents:"
          ls -la app/
          echo "File size: $(wc -c < app/release-keystore.jks) bytes"
          echo "Keystore file exists: $(test -f app/release-keystore.jks && echo "YES" || echo "NO")"
          echo "=== END KEYSTORE DECODING DEBUG ==="
        env:
          SIGNING_KEYSTORE: ${{ secrets.SIGNING_KEYSTORE }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APK
        env:
          RELEASE_KEYSTORE_PATH: release-keystore.jks
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          echo "=== BUILD DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Building with keystore path: $RELEASE_KEYSTORE_PATH"
          echo "Environment variables:"
          echo "RELEASE_KEYSTORE_PATH: $RELEASE_KEYSTORE_PATH"
          echo "SIGNING_KEY_ALIAS: $SIGNING_KEY_ALIAS"
          echo "SIGNING_KEY_PASSWORD: [SET]"
          echo "SIGNING_STORE_PASSWORD: [SET]"
          echo "Directory contents:"
          ls -la
          echo "App folder contents:"
          ls -la app/
          echo "Keystore file exists: $(test -f app/$RELEASE_KEYSTORE_PATH && echo "YES" || echo "NO")"
          
          echo "=== KEYSTORE INFO ==="
          echo "Keystore file size: $(wc -c < app/$RELEASE_KEYSTORE_PATH) bytes"
          echo "Keystore permissions: $(ls -la app/$RELEASE_KEYSTORE_PATH)"
          
          echo "=== KEYSTORE CONTENTS ==="
          echo "Checking keystore contents..."
          if command -v keytool &> /dev/null; then
            echo "Keytool found, listing keystore contents:"
            keytool -list -keystore app/$RELEASE_KEYSTORE_PATH -storepass "$SIGNING_STORE_PASSWORD" 2>/dev/null || echo "Failed to list keystore contents"
          else
            echo "Keytool not found, cannot check keystore contents"
          fi
          
          echo "=== ENVIRONMENT CHECK ==="
          echo "RELEASE_KEYSTORE_PATH: '$RELEASE_KEYSTORE_PATH'"
          echo "SIGNING_KEY_ALIAS: '$SIGNING_KEY_ALIAS'"
          echo "SIGNING_KEY_PASSWORD: '${SIGNING_KEY_PASSWORD:0:3}...'"
          echo "SIGNING_STORE_PASSWORD: '${SIGNING_STORE_PASSWORD:0:3}...'"
          
          echo "=== STARTING GRADLE BUILD ==="
          ./gradlew assembleRelease

      - name: Find APK
        id: find_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "APK found at: $APK_PATH"
          ls -la app/build/outputs/apk/release/

      - name: Send APK to Telegram Chat 1
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT1 }}
        run: |
          if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
            echo "Sending APK to first chat..."
            curl -F chat_id=$CHAT_ID \
                 -F document=@"${{ steps.find_apk.outputs.apk_path }}" \
                 -F caption="ðŸš€ New APK Build - $(date '+%Y-%m-%d %H:%M:%S')" \
                 "https://api.telegram.org/bot$BOT_TOKEN/sendDocument"
          else
            echo "APK file not found!"
            exit 1
          fi

      - name: Send APK to Telegram Chat 2
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT2 }}
        run: |
          if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
            echo "Sending APK to second chat..."
            curl -F chat_id=$CHAT_ID \
                 -F document=@"${{ steps.find_apk.outputs.apk_path }}" \
                 -F caption="ðŸš€ New APK Build - $(date '+%Y-%m-%d %H:%M:%S')" \
                 "https://api.telegram.org/bot$BOT_TOKEN/sendDocument"
          else
            echo "APK file not found!"
            exit 1
          fi

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30

  version-bump:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.12'

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(./gradlew properties -q | grep "versionName:" | awk '{print $2}' | tr -d "'")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in build.gradle.kts
        run: |
          sed -i "s/versionName = \"${{ steps.current_version.outputs.current_version }}\"/versionName = \"${{ steps.new_version.outputs.new_version }}\"/" app/build.gradle.kts
          sed -i "s/versionCode = [0-9]*/versionCode = ${{ github.run_number }}/" app/build.gradle.kts
          echo "Version updated in build.gradle.kts"

      - name: Commit and push version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/build.gradle.kts
          git commit -m "Bump version to ${{ steps.new_version.outputs.new_version }} [skip ci]"
          git push origin main
          echo "Version bumped and pushed successfully"
