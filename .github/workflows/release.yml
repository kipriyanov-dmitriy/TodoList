name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'New release'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.12'

      - name: Decode Keystore
        run: |
          echo "$SIGNING_KEYSTORE" | base64 --decode > ./app/release-keystore.jks
          echo "RELEASE_KEYSTORE_PATH=app/release-keystore.jks" >> $GITHUB_ENV
          ls -la app/
          echo "Keystore decoded successfully"
        env:
          SIGNING_KEYSTORE: ${{ secrets.SIGNING_KEYSTORE }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APK
        env:
          RELEASE_KEYSTORE_PATH: app/release-keystore.jks
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          echo "Building with keystore path: $RELEASE_KEYSTORE_PATH"
          ls -la app/
          ./gradlew assembleRelease

      - name: Find APK
        id: find_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "APK found at: $APK_PATH"
          ls -la app/build/outputs/apk/release/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
            
            ## APK Download
            Download the APK from the assets below.
            
            ## Changes
            - Automated build from GitHub Actions
            - Signed with release keystore
            - Build date: $(date '+%Y-%m-%d %H:%M:%S')
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_apk.outputs.apk_path }}
          asset_name: app-release-${{ github.event.inputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Send APK to Telegram Chat 1
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT1 }}
        run: |
          if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
            echo "Sending APK to first chat..."
            curl -F chat_id=$CHAT_ID \
                 -F document=@"${{ steps.find_apk.outputs.apk_path }}" \
                 -F caption=" New Release v${{ github.event.inputs.version }} - $(date '+%Y-%m-%d %H:%M:%S')" \
                 "https://api.telegram.org/bot$BOT_TOKEN/sendDocument"
          else
            echo "APK file not found!"
            exit 1
          fi

      - name: Send APK to Telegram Chat 2
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT2 }}
        run: |
          if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
            echo "Sending APK to second chat..."
            curl -F chat_id=$CHAT_ID \
                 -F document=@"${{ steps.find_apk.outputs.apk_path }}" \
                 -F caption=" New Release v${{ github.event.inputs.version }} - $(date '+%Y-%m-%d %H:%M:%S')" \
                 "https://api.telegram.org/bot$BOT_TOKEN/sendDocument"
          else
            echo "APK file not found!"
            exit 1
          fi
